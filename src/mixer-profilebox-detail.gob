%{
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
%}
%a{
#include <gtk/gtk.h>
#include "vc.h"
#include "xfce-mixer-profile.h"
%}
%{
#include <libxfce4util/i18n.h>
#include "xfce-mixer-cache-vc.h"
#include "xfce-mixer-mcs-client.h"
#include "helpers3.inc"
#define emit

extern GtkTooltips * tooltips;

static void each_vccache_cb (volcontrol_t *vci, gpointer userdata);

extern XfceMixerMcsClient *mcsc;

static gboolean 
true_hfe_cb(gchar const *k, gint v, gpointer user_data)
{
	return TRUE;
}

#define COLUMN_ACTIVE (gint)0
#define COLUMN_PRETTY_NAME (gint)1
#define COLUMN_TYPE (gint)2
#define COLUMN_VCNAME (gint)3
#define COLUMN_LOCATION (gint)4

%}

class Xfce:Mixer:Profilebox:Detail from Gtk:VBox {
	protected GtkEntry *detail_name_entry;
	protected GtkScrolledWindow *detail_sw;
	protected GtkBox *detail_box;
	protected GtkTreeView *detail_tv;
	protected GtkTreeStore *detail_model;
	protected gboolean dofill = FALSE;
	protected XfceMixerProfile *profile = NULL
		unrefwith g_object_unref;
	protected gchar *valids = NULL /* TODO autoupdate */
		destroywith g_free;
	protected GHashTable *presents = NULL
		destroywith g_hash_table_destroy; /* key = vcname, value = self */
	protected GtkButton *detail_up_button;
	protected GtkButton *detail_down_button;

	public void check_all (self)
	{
		gboolean b;
		GtkTreeIter iter;

		b = gtk_tree_model_get_iter_first (GTK_TREE_MODEL (self->detail_model), &iter);
		if (!b)
			return;

		while (b) {
			gtk_tree_store_set (self->detail_model, &iter,
				COLUMN_ACTIVE, TRUE, -1);

			b = gtk_tree_model_iter_next (GTK_TREE_MODEL (self->detail_model), &iter);
		}

	}

	public void set_profile (self, XfceMixerProfile *p)
	{
		gchar const *t;
		if (self->profile) {
			g_object_unref (G_OBJECT (self->profile));
			self->profile = NULL;
		}

		if (p) {
			self->profile = p;
			g_object_ref (G_OBJECT (p));
			t = xfce_mixer_profile_get_title (p);
			self_filln (self, t);
		} else
			self_unfill (self);
	}

	protected void up_clicked_cb (self, GtkButton *b)
	{
		GtkTreeSelection *sel;
		GtkTreeIter iter;
		GtkTreeModel *model;
		gboolean b;
		sel = gtk_tree_view_get_selection (self->detail_tv);
		if (!sel)
			return;

		b = gtk_tree_selection_get_selected (sel, &model, &iter);
		if (!b)
			return;

		g_warning ("move");
		gtk_tree_store_move_before (self->detail_model, &iter, &iter);
	}

	protected void down_clicked_cb (self, GtkButton *b)
	{
		GtkTreeSelection *sel;
		GtkTreeIter iter;
		GtkTreeModel *model;
		gboolean b;
		sel = gtk_tree_view_get_selection (self->detail_tv);
		if (!sel)
			return;

		b = gtk_tree_selection_get_selected (sel, &model, &iter);
		if (!b)
			return;

		gtk_tree_store_move_after (self->detail_model, &iter, &iter);
	}

	init(self)
	{
		GtkBox *nbox;
		GtkWidget *dlabel;
		GtkWidget *detail_hb;
		GtkWidget *detail_vbb;

		self->presents = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, NULL);

		self->detail_box = GTK_BOX (self);
		gtk_box_set_spacing (self->detail_box, 5);

		self->detail_sw = GTK_SCROLLED_WINDOW (gtk_scrolled_window_new (NULL, NULL));
		gtk_scrolled_window_set_policy (self->detail_sw, GTK_POLICY_NEVER, GTK_POLICY_AUTOMATIC);
		gtk_widget_show (GTK_WIDGET (self->detail_sw));

		self->detail_model = GTK_TREE_STORE (gtk_tree_store_new (
			5, G_TYPE_BOOLEAN, G_TYPE_STRING, G_TYPE_STRING,
			G_TYPE_STRING, G_TYPE_STRING
		));

		self->detail_tv = GTK_TREE_VIEW (gtk_tree_view_new ());

		gtk_tree_view_append_column (self->detail_tv, 
			tree_new_check_column ("", 0, GTK_TREE_MODEL (self->detail_model)
		));
		gtk_tree_view_append_column (self->detail_tv, 
			tree_new_text_column (_("Control"), 1
		));
		gtk_tree_view_append_column (self->detail_tv, 
			tree_new_text_column (_("Type"), 2
		));
		/*gtk_tree_view_append_column (self->detail_tv, 
			tree_new_text_column (_("Location"), 3
		));*/

		gtk_tree_view_set_model (self->detail_tv, GTK_TREE_MODEL (self->detail_model));
		gtk_tree_view_set_headers_visible (self->detail_tv, TRUE);

		gtk_widget_show (GTK_WIDGET (self->detail_tv));

		self->detail_up_button = GTK_BUTTON (
			gtk_button_new_with_mnemonic (_("Up"))
		);
		self->detail_down_button = GTK_BUTTON (
			gtk_button_new_with_mnemonic (_("Down"))
		);

		gtk_widget_show (GTK_WIDGET (self->detail_up_button));
		gtk_widget_show (GTK_WIDGET (self->detail_down_button));

		gtk_tooltips_set_tip (tooltips, GTK_WIDGET (self->detail_up_button), 
			_("Move Entry Up"), NULL);

		gtk_tooltips_set_tip (tooltips, GTK_WIDGET (self->detail_down_button), 
			_("Move Entry Down"), NULL);

		g_signal_connect_swapped (G_OBJECT (self->detail_up_button), "clicked", 
			G_CALLBACK (self_up_clicked_cb), self);
		g_signal_connect_swapped (G_OBJECT (self->detail_down_button), "clicked", 
			G_CALLBACK (self_down_clicked_cb), self);

		gtk_container_add (GTK_CONTAINER (self->detail_sw), GTK_WIDGET (self->detail_tv));

		dlabel = gtk_label_new (_("Profile Name:"));
		gtk_widget_show (dlabel);

		self->detail_name_entry = GTK_ENTRY (gtk_entry_new ());
		gtk_entry_set_max_length (self->detail_name_entry, 79);
		gtk_widget_show (GTK_WIDGET (self->detail_name_entry));

		nbox = GTK_BOX (gtk_hbox_new (FALSE, 5));
		gtk_box_pack_start (nbox, GTK_WIDGET (dlabel), FALSE, FALSE, 0);
		gtk_box_pack_start (nbox, GTK_WIDGET (self->detail_name_entry), TRUE, TRUE, 0);
		gtk_widget_show (GTK_WIDGET (nbox));

		gtk_box_pack_start (GTK_BOX (self->detail_box), GTK_WIDGET (nbox), FALSE, FALSE, 0);

		detail_hb = gtk_hbox_new (FALSE, 5);

		detail_vbb = gtk_vbutton_box_new ();
		gtk_container_set_border_width (GTK_CONTAINER (detail_vbb), 5);
		gtk_box_pack_start (GTK_BOX (detail_vbb), GTK_WIDGET (self->detail_up_button), FALSE, FALSE, 0);
		gtk_box_pack_start (GTK_BOX (detail_vbb), GTK_WIDGET (self->detail_down_button), FALSE, FALSE, 0);

		gtk_widget_show (GTK_WIDGET (detail_vbb));

		gtk_box_pack_start (GTK_BOX (detail_hb), GTK_WIDGET (self->detail_sw), TRUE, TRUE, 0);
		gtk_box_pack_start (GTK_BOX (detail_hb), GTK_WIDGET (detail_vbb), FALSE, FALSE, 0);
		gtk_widget_show (GTK_WIDGET (detail_hb));

		gtk_box_pack_start (GTK_BOX (self->detail_box), GTK_WIDGET (detail_hb), TRUE, TRUE, 0);

		gtk_tree_view_set_reorderable (self->detail_tv, TRUE);
		g_signal_connect_swapped (G_OBJECT (self->detail_model),
			"rows-reordered", G_CALLBACK (self_rows_reordered_cb),
			self);

		gtk_entry_set_activates_default (self->detail_name_entry, TRUE);

	}

	public void clear(self)
	{
		gtk_entry_set_text (GTK_ENTRY (self->detail_name_entry), "");
		gtk_tree_store_clear (self->detail_model);
		g_hash_table_foreach_remove (self->presents, (GHRFunc)true_hfe_cb, self);
	}

	public gchar const *get_name(self)
	{
		return gtk_entry_get_text (self->detail_name_entry);
	}

	public void save (self)
	{
		t_mixer_profile_item *it;
		gint orderno;
		gboolean b;
		gboolean active;
		gchar *vcname;
		GtkTreeIter iter;
		gchar *location;

		b = gtk_tree_model_get_iter_first (GTK_TREE_MODEL (self->detail_model), &iter);
		if (!b)
			return;

		it = g_new0 (t_mixer_profile_item, 1);

		orderno = 1;

		while (b) {
			gtk_tree_model_get (GTK_TREE_MODEL (self->detail_model),
				&iter,
				COLUMN_ACTIVE, &active,
				COLUMN_VCNAME, &vcname,
				COLUMN_LOCATION, &location,
				-1
			);

			if(vcname) {
				if (active)
					it->orderno = orderno;
				else
					it->orderno = -1;

				it->vcname = vcname;

				it->location = location;

				if (self->profile)
					xfce_mixer_profile_update_control (self->profile, it);
				
				g_free (vcname);
			}

			if (location)
				g_free (location);

			++orderno;
			b = gtk_tree_model_iter_next (GTK_TREE_MODEL (self->detail_model), &iter);
		}
		
		g_free (it);
	}

	protected void fill (self)
	{
		GList *go;
		GList *g;
		t_mixer_profile_item *it;

		self->dofill = TRUE;
		self_clear (self);
		/* 1. add profile data */
		/* 2. add possible, but yet-to-be-used controls (which are not in profile) */

		/* 1.: */
		go = NULL;
		if (self->profile)
			go = xfce_mixer_profile_get_control_list (self->profile);

		if (go) {
			g = go;
			for(; g; g = g_list_next (g)) {
				it = (t_mixer_profile_item *)g->data;
				if (!it)
					continue;

				self_each_profile_item_cb (self, it);
			}
			xfce_mixer_profile_free_control_list (self->profile, go);
		}

		if (self->valids)
			g_free (self->valids);
		self->valids = NULL;

		if (mcsc)
			self->valids = xfce_mixer_mcs_client_get_useful_controls (mcsc,
                                vc_get_device ());

		xfce_mixer_cache_vc_foreach ((GFunc)each_vccache_cb, self);
		gtk_widget_set_sensitive (GTK_WIDGET (self), TRUE);
		if (self->valids) {
			g_free (self->valids);
			self->valids = NULL;
		}
	}

	protected void unfill (self)
	{
		self->dofill = FALSE;
		gtk_widget_set_sensitive (GTK_WIDGET (self), FALSE);
		self_clear (self);
	}

	public void filln (self, char const *pname)
	{
		self_fill (self);
		gtk_entry_set_text (GTK_ENTRY (self->detail_name_entry), pname);
	}

	protected void each_profile_item_cb (self, t_mixer_profile_item *it)
	{
		GtkTreeIter iter;
		gchar tyc;
		gchar *ty;
		/*gchar const *loc;*/

		/* it is not NULL */

		if (!it->vcname || !xfce_mixer_cache_vc_valid (it->vcname))
			return;

		if (self->presents && g_hash_table_lookup (self->presents, it->vcname)) {
			/* already there. */
			return;
		}

		if (self->presents) 
			g_hash_table_insert (self->presents, g_strdup (it->vcname), self);

		tyc = xfce_mixer_cache_vc_get_type (it->vcname);

		ty = _("<unknown>");
		switch(tyc) {
		case 'S': ty = _("<slider>"); break;
		case 'O': ty = _("<onoff>"); break;
		case 'C': ty = _("<select>"); break;
		default:
			return;
		}

		gtk_tree_store_append (self->detail_model, &iter, NULL);
		gtk_tree_store_set (self->detail_model, &iter, 
			COLUMN_ACTIVE, TRUE,
			COLUMN_PRETTY_NAME, it->vcname,
			COLUMN_TYPE, ty,
			COLUMN_VCNAME, it->vcname,
		-1);

		self_set_loc(self, &iter, tyc);
	}

	private void set_loc(self, GtkTreeIter *iter, gchar tyc)
	{
		gchar const *loc;
		loc = NULL;
		switch(tyc) {
		case 'S': loc = "sliders"; break;
		case 'O': loc = "switches"; break;
		case 'C': loc = "switches"; break;
		default:
			return;
		}
		gtk_tree_store_set (self->detail_model, iter,
			COLUMN_LOCATION, loc, -1);
	}

	public void each_vccache_cb (self, volcontrol_t *vci, gboolean on_s)
	{
		GtkTreeIter iter;
		gchar *ty;
		gchar *uct;
		gchar tyc;
		gboolean b;

		b = FALSE;

		if (self->valids) {
			uct = g_strdup_printf ("@%s@", vci->name);
			if (uct) {
				b = g_strrstr (self->valids, uct) != NULL;
                                /*printf ("%s %s %d", uc , uct, (int)b );*/
				g_free (uct);
                        }   
                }

		if (!b)
			return;

		if (self->presents && g_hash_table_lookup (self->presents, vci->name)) {
			/* already there. */
			return;
		}

		if (self->presents) 
			g_hash_table_insert (self->presents, g_strdup (vci->name), self);

		ty = _("<unknown>");
		switch(vci->type) {
		case CT_SLIDER: ty = _("<slider>"); break;
		case CT_ONOFF: ty = _("<onoff>"); break;
		case CT_SELECT: ty = _("<select>"); break;
		}

		tyc = xfce_mixer_cache_vc_get_type (vci->name);

		b = on_s;

		gtk_tree_store_append (self->detail_model, &iter, NULL);
		gtk_tree_store_set (self->detail_model, &iter, 
			COLUMN_ACTIVE, b,
			COLUMN_PRETTY_NAME, vci->name,
			COLUMN_TYPE, ty,
			COLUMN_VCNAME, vci->name, -1);
		self_set_loc(self, &iter, tyc);
	}

	protected void rows_reordered_cb (self, GtkTreePath *arg1, GtkTreeIter *arg2,
		gpointer arg3, GtkTreeModel *model)
	{
		g_warning ("reordered");
	}


	public Xfce:Mixer:Profilebox:Detail *new(void) {
		return XFCE_MIXER_PROFILEBOX_DETAIL (GET_NEW);
	}
}

%{
static void each_vccache_cb (volcontrol_t *vci, gpointer userdata)
{
	XfceMixerProfileboxDetail *d;
	d = XFCE_MIXER_PROFILEBOX_DETAIL (userdata);

	if (vci && vci->name) {
		xfce_mixer_profilebox_detail_each_vccache_cb (d, vci, FALSE);
	}
}
%}

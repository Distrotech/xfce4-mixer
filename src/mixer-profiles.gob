%a{
#include <gtk/gtk.h>
#include "xfce-mixer-profile.h"
#include "xfce-mixer-pxml.h"
%}
%{
#include <libxfce4util/libxfce4util.h>
#include <my-config.h>
#define emit
#define PROFILES_ROOT "Profiles"
#define PROFILES_CONFIG_FILENAME "profiles.xml"

#ifndef MAX_PATH
#define MAX_PATH 4096
#endif

static void profiles_free (GList *profiles)
{
	GList *g;
	g = profiles;
	while (g) {
		g_object_unref (G_OBJECT (g->data));
		g = g_list_next (g);
	}
	g_list_free (profiles);
}

%}

class Xfce:Mixer:Profiles from G:Object {
	protected gchar *device = NULL
		destroywith g_free;
	protected gchar *fname = NULL
		destroywith g_free;
	protected gboolean modified = FALSE;
	protected gint weird_number = 0;
	protected guint profilesChangedDelayed = 0
		destroy {
			if (VAR) g_source_remove (VAR);
			VAR = 0;
		};

	protected GList *profiles = NULL
		destroy {
			profiles_free(VAR);
			VAR = NULL;
		};

	protected XfceMixerPxml *xml = NULL
		unrefwith g_object_unref;

	signal first NONE (NONE)
	void profiles_changed (self)
	{
	}

	init (self)
	{
		gchar *tpath;
		self->fname = g_strdup (PROFILES_CONFIG_FILENAME);

		self->xml = xfce_mixer_pxml_new (PROFILES_ROOT);
		tpath = my_config_get_path (self->fname, CONFIG_LOAD);
		if (tpath) {
			g_object_set (G_OBJECT (self->xml), "fname", tpath, NULL);
			g_free (tpath);
		}
	}

	public void clear(self)
	{
		profiles_free (self->profiles);
		self->weird_number = 0;
		self->profiles = NULL;
	}

	public GList *get_profile_names (self)
	{
		GList *g;
		GList *gn;
		XfceMixerProfile *p;
		gchar const *so;
		gn = NULL;
		g = self->profiles;
		while (g) {
			p = XFCE_MIXER_PROFILE (g->data);
			so = xfce_mixer_profile_get_title (p);

			gn = g_list_append (gn, g_strdup (so));

			g = g_list_next (g);
		}

		return gn;
	}

	protected void goto_device (self)
	{
		gchar *n;
		xfce_mixer_pxml_goto_root (self->xml);
		xfce_mixer_pxml_goto_children (self->xml);
		while (self->xml->node) {
			if (xfce_mixer_pxml_check_tag (self->xml, "device")) {
				n = xfce_mixer_pxml_get_prop (self->xml, "name");
				if (n && self->device && g_str_equal (n, self->device)) {
					g_free (n);
					return;
				}
				if (n)
					g_free (n);
			}

			xfce_mixer_pxml_goto_next (self->xml);
		}

		/* device does not exist yet in xml */
		self->xml->node = NULL;
		xfce_mixer_pxml_goto_root (self->xml);
		self->xml->node = xfce_mixer_pxml_create_text_child (self->xml, "device", NULL);
		xfce_mixer_pxml_set_prop (self->xml, "name", self->device);
	}

	protected void load_profile(self, XfceMixerProfile *p)
	{
		xfce_mixer_profile_load (p, self->xml);
	}

	public void load(self)
	{
		gchar *tpath;
		gchar *n;
		XfceMixerProfile *p;
		xmlNodePtr parent;
		self_clear (self);

		tpath = my_config_get_path (self->fname, CONFIG_LOAD);
		if (tpath) {
			g_object_set (G_OBJECT (self->xml), "fname", tpath, NULL);
			g_free (tpath);
		}

		self_goto_device (self);

		xfce_mixer_pxml_goto_children (self->xml);
		while (self->xml->node) {
			parent = self->xml->node;
			if (xfce_mixer_pxml_check_tag (self->xml, "profile")) {
				n = xfce_mixer_pxml_get_prop (self->xml, "name");
				if (n) {
					p = XFCE_MIXER_PROFILE (xfce_mixer_profile_new (n));
					if (p) {
						self_load_profile (self, p);

						self_add_profile (self, p);
						g_object_unref (G_OBJECT (p));
					}
				}
			}
			self->xml->node = parent;

			xfce_mixer_pxml_goto_next (self->xml);
		}

	}

	protected void xml_text_child (self, gchar const *tagname)
	{
		self->xml->node = xfce_mixer_pxml_create_text_child (self->xml, tagname, NULL);
	}

	protected void save_profile(self, XfceMixerProfile *p)
	{
		xfce_mixer_profile_save (p, self->xml);
	}

	public void save(self)
	{
		xmlNodePtr profilesx;
		XfceMixerProfile *p;
		GList *g;
		gchar const *n;
		gchar *tpath;

		if (!self_get_modified (self))
			return;

		tpath = my_config_get_path (self->fname, CONFIG_SAVE);
		if (tpath) {
			g_object_set (G_OBJECT (self->xml), "fname", tpath, NULL);
			g_free (tpath);
		}

		xfce_mixer_pxml_goto_root (self->xml);
		self_goto_device (self);

		profilesx = self->xml->node;

		xfce_mixer_pxml_eat_children (self->xml, NULL);

		g = self->profiles;
		while (g) {
			p = XFCE_MIXER_PROFILE (g->data);

			n = xfce_mixer_profile_get_title (p);
			xfce_mixer_pxml_goto_node (self->xml, profilesx);
			self_xml_text_child (self, "profile");
			xfce_mixer_pxml_set_prop (self->xml, "name", n);

			self_save_profile (self, p);
			

			g = g_list_next (g);
		}

		self_set_modified (self, FALSE);
	}

	public void add_profile (self, XfceMixerProfile *pn)
	{
		XfceMixerProfile *p;
		gchar const *fixedname;
		gchar tmp[MAX_PATH];
		if (!pn)
			return;

		fixedname = xfce_mixer_profile_get_title (pn);

		if (fixedname)
			g_snprintf (tmp, MAX_PATH, "%s", fixedname);
		else
			g_snprintf (tmp, MAX_PATH, _("profile%d"), ++self->weird_number);

		/* check if name is a dupe */

		p = self_get_profile (self, tmp);
		if (p) {
			g_object_unref (G_OBJECT (p));
			g_snprintf (tmp, MAX_PATH, _("profile%d"), ++self->weird_number);

			p = self_get_profile (self, tmp);
			if (p) { /* hmpf. */
				g_object_unref (G_OBJECT (p));
				return;
			}
		}

		g_object_ref (G_OBJECT (pn));
		self->profiles = g_list_append (self->profiles, pn);
		self_set_modified (self, TRUE);
	}

	/*public XfceMixerProfile *create_profile (self, gchar const *fixedname)
	{
		XfceMixerProfile *p;
		p = XFCE_MIXER_PROFILE (xfce_mixer_profile_new (tmp));
		return p;
	}*/

	public XfceMixerProfile *get_profile (self, gchar const *name)
	{
		GList *g;
		gchar const *s;
		g = self->profiles;
		if (!name)
			return NULL;

		while (g) {
			s = xfce_mixer_profile_get_title (XFCE_MIXER_PROFILE (g->data));
			if (s) {
				if (g_str_equal (s, name)) {
					g_object_ref (G_OBJECT (g->data));
					return XFCE_MIXER_PROFILE (g->data);
				}
			}
			g = g_list_next (g);
		}

		return NULL;
	}

	public void delete_profile (self, gchar const *name)
	{
		XfceMixerProfile *p;
		if (!name)
			return;

		p = self_get_profile (self, name);
		if (p) {
			g_object_unref (G_OBJECT (p));
			g_object_unref (G_OBJECT (p));
			self->profiles = g_list_remove (self->profiles, p);
			self_set_modified (self, TRUE);
		}
	}

	public void set_modified (self, gboolean modi)
	{
		self->modified = modi;
		if (modi) {
			if (self->profilesChangedDelayed) {
				g_source_remove (self->profilesChangedDelayed);
				self->profilesChangedDelayed = 0;
			}

			self->profilesChangedDelayed = g_timeout_add (500, 
				(GSourceFunc)self_delayed_pc_cb, self);
		}
	}

	protected gboolean delayed_pc_cb (self)
	{
		emit self_profiles_changed (self);
		return FALSE;
	}

	public gboolean get_modified (self)
	{
		return self->modified;
	}

	public XfceMixerProfiles *new (gchar const *device)
	{
		XfceMixerProfiles *p;
		p = XFCE_MIXER_PROFILES (GET_NEW);
		p->device = g_strdup (device);
		return p;
	}
}

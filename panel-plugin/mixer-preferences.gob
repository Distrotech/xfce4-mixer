%{
#ifdef HAVE_CONFIG_H
#  include <config.h>
#endif
%}
%a{
#include <gtk/gtk.h>
#include <libxfce4util/libxfce4util.h>
%}
%h{
#include "helpers_h.inc"
%}
%{
#include "xfce-mixer-cache-vc.h"
#include "vc.h"
#include "helpers.inc"
#include "stringlist.inc"

#define MIXER_ROOT "Mixer"

%}
%a{
%}

class Xfce:Mixer:Preferences from G:Object {
	private gchar *device = NULL
		destroy {
			if (VAR) {
				g_free (VAR);
				VAR = NULL;
			}
		};

	private gchar *master = NULL
		destroy {
			if (VAR) {
				g_free (VAR);
				VAR = NULL;
			}
		};

	protected gchar *probably_master = NULL
		destroy {
			if (VAR) {
				g_free (VAR);
				VAR = NULL;
			}
		};

	private gchar *launcher_command = NULL
		destroy {
			if (VAR) {
				g_free (VAR);
				VAR = NULL;
			}
		};

	private gboolean launcher_run_in_terminal = FALSE;
	private gboolean launcher_use_startup_notification = FALSE;

	protected GList *master_lst = NULL
		destroy {
			stringlist_free(VAR);
			VAR = NULL;
		};

	property STRING device
		(nick = "The device to use for this item",
		blurb = "The sound device to use for this item")
	set {
		if (selfp->device) {
			g_free (selfp->device);
			selfp->device = NULL;
		}
		selfp->device = g_strdup (g_value_get_string (VAL));

		self_fill_probably_master (self);

		if (selfp->master && !xfce_mixer_cache_vc_valid (selfp->master)) {
			g_object_set (G_OBJECT (self), "master", NULL, NULL);
		}
	}
	get {
		g_value_set_string (VAL, selfp->device);
	};

	property STRING master
		(nick = "master control name",
		blurb = "The vcname of the master control for the plugin")
	set {
		if (selfp->master) {
			g_free (selfp->master);
			selfp->master = NULL;
		}
		if (VAL)
			selfp->master = g_strdup (g_value_get_string (VAL));
		else
			selfp->master = NULL;
	}
	get {
		if (!self->_priv->master)
			g_value_set_string (VAL, self->probably_master);
		else
			g_value_set_string (VAL, self->_priv->master);
	};

	property STRING launcher_command
		(nick = "program to start on click",
		blurb = "The command line to start when the plugin is clicked")
	set {
		if (selfp->launcher_command) {
			g_free (self->_priv->launcher_command);
			selfp->launcher_command = NULL;
		}
		selfp->launcher_command = g_strdup (g_value_get_string (VAL));
	}
	get {
		g_value_set_string (VAL, selfp->launcher_command);
	};

	property BOOLEAN launcher_run_in_terminal
		(nick = "start the program in a terminal",
		blurb = "start the program in a terminal", link);
		
	property BOOLEAN launcher_use_startup_notification
		(nick = "use startup notification",
		blurb = "use startup notification", link);

	public XfceMixerPreferences *new(void)
	{
		return XFCE_MIXER_PREFERENCES (GET_NEW);
	}

	protected void fill_probably_master (self)
	{
		if (self->probably_master) {
			g_free (self->probably_master);
			self->probably_master = NULL;
		}
		if (self->master_lst) {
			stringlist_free (self->master_lst);
			self->master_lst = NULL;
		}
		xfce_mixer_cache_vc_foreach (master_enum_cb, &self->master_lst);

		self->probably_master = self_find_probably_master (self);
	}

	protected gchar *find_probably_master (self)
	{
		/* search om, find "Master", return index or -1 */
		gchar *r_s;
		gchar *master_s;
		gchar *master1_s;
		gchar *pcm_s;
		GList *g;
		gchar *s;
		master_s = NULL;
		master1_s = NULL;
		pcm_s = NULL;
		r_s = NULL;

		g = self->master_lst;
		while (g) {
			s = (gchar *)g->data;
			if (s) {
				if (g_str_has_prefix (s, "Master,")) master_s = s;
				else if (g_str_has_prefix (s, "Master")) {
					if (!master1_s) 
						master1_s = s;
				}
				else if (g_str_has_prefix (s, "PCM")) {
					pcm_s = s;
				}
			}
			g = g_list_next (g);
		}

		if (master_s)
			r_s = master_s;
		else if (master1_s)
			r_s = master1_s;
		else if (pcm_s)
			r_s = pcm_s;

		if (!r_s)
			return NULL;

		return g_strdup (r_s);
	}

	init (self)
	{
		self_fill_probably_master (self);
	}

	public void load (self, XfceRc* rc)
	{
		/* configurable:
			Device
			LauncherCommand
			LauncherRunInTerminal
			LauncherUseStartupNotification
			MasterControl
		*/

		gchar const* device;
		gchar const* launcher_command;
		gboolean launcher_run_in_terminal;
		gboolean launcher_use_startup_notification;
		gchar const* master_control;

		device = xfce_rc_read_entry (rc, "Device", NULL);
		launcher_command = xfce_rc_read_entry (rc, "LauncherCommand", NULL);
		launcher_run_in_terminal = xfce_rc_read_bool_entry (rc, "LauncherRunInTerminal", FALSE);
		launcher_use_startup_notification = xfce_rc_read_bool_entry (rc, "LauncherUseStartupNotification", FALSE);
		master_control = xfce_rc_read_entry (rc, "MasterControl", NULL);

		if (device) {
			g_object_set (G_OBJECT (self), "device", device, NULL);
		}

		g_object_set (G_OBJECT (self), 
					"launcher_command", launcher_command, 
					"launcher_run_in_terminal", (gboolean) launcher_run_in_terminal,
					"launcher_use_startup_notification", (gboolean) launcher_use_startup_notification,
				NULL);

		if (master_control) {
			g_object_set (G_OBJECT (self), "master", master_control, NULL);
		}
	}

	public void save (self, XfceRc* rc)
	{
		/* configurable:
			Device
			LauncherCommand
			LauncherRunInTerminal
			LauncherUseStartupNotification
			MasterControl
		*/

		gchar const* launcher_command;
		gboolean launcher_run_in_terminal;
		gboolean launcher_use_startup_notification;
		gchar const* device;
		gchar const* master_control;

		launcher_command = self->_priv->launcher_command;
		launcher_run_in_terminal = self->_priv->launcher_run_in_terminal;
		launcher_use_startup_notification = self->_priv->launcher_use_startup_notification;
		device = self->_priv->device;
		master_control = self->_priv->master;

		if (device != NULL) {
			xfce_rc_write_entry (rc, "Device", device);
		} else {
			xfce_rc_delete_entry (rc, "Device", FALSE);
		}

		if (launcher_command != NULL) {
			xfce_rc_write_entry (rc, "LauncherCommand", launcher_command);
		} else {
			xfce_rc_delete_entry (rc, "LauncherCommand", FALSE);
		}

		xfce_rc_write_bool_entry (rc, "LauncherRunInTerminal", launcher_run_in_terminal);
		xfce_rc_write_bool_entry (rc, "LauncherUseStartupNotification", launcher_use_startup_notification);

		if (master_control != NULL) {
			xfce_rc_write_entry (rc, "MasterControl", master_control);
		} else {
			xfce_rc_delete_entry (rc, "MasterControl", FALSE);
		}

	}
}
